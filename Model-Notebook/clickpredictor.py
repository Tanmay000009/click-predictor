# -*- coding: utf-8 -*-
"""ClickPredictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v1qtttalgEtg5DgsurOAQe4CnBO3THcw
"""

import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
import numpy as np
from matplotlib import style
from sklearn import impute
DATA = pd.read_csv("/content/drive/MyDrive/train_.csv",index_col="Unnamed: 0")
DATA

DATA.isnull().sum()

DATA = DATA.drop_duplicates()

DATA["time"] = pd.to_datetime(DATA["hour"], format="%y%m%d%H")
DATA["hour"] = DATA["time"].dt.hour
DATA

DATA.info()

sns.countplot(DATA['click'], data=DATA)

sns.histplot(data=DATA['click'], x=DATA["hour"])

plt.figure(figsize=(10, 10))
sns.distplot(DATA['hour'][DATA['click']==1], color='yellow')
sns.distplot(DATA['hour'][DATA['click']==0], color='blue')
plt.legend(["1","0"]) 
plt.show()

plt.figure(figsize=(10, 10))
sns.countplot(DATA['hour'][DATA['click']==1])
plt.show()

correlation = DATA.drop(["id"],axis=1).corr()
fig = plt.figure(figsize = (15,15))
sns.heatmap(correlation, annot = True, square = True)

"""1.   device type and C1 are strongly related
2.   C14 and C17 are strongly related
3.   C18 and C21 show some connection
"""

plt.figure(figsize=(10,10))
x = DATA['device_type']
y = DATA['C1']
plt.scatter(x, y)

plt.figure(figsize=(10,10))
x = DATA['C17']
y = DATA['C14']
plt.scatter(x, y)

plt.figure(figsize=(10,10))
x = DATA['C18']
y = DATA['C21']
plt.scatter(x, y)

DATA.info()

DATA.columns

DATA

DATA.nunique()

DATA = DATA.drop(['id', 'site_id', 'site_domain', 'app_id', 'app_domain', 'device_id',
       'device_ip','time'],axis=1)

DATA = DATA.drop(['device_model'],axis=1)

"""site id and site domain se better parameter is site category
same for app
"""

DATA=pd.DataFrame(DATA,columns= [ 'click', 'hour', 'C1', 'banner_pos',
       'site_category', 'app_category', 'device_type', 'device_conn_type', 'C14',
       'C15', 'C16', 'C17', 'C18', 'C19', 'C20', 'C21'])

x=DATA.iloc[:,1:].values
y=DATA.iloc[:,0].values

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=9)

"""x : without id
X : without device_ip and id
"""

x_train=pd.DataFrame(x_train,columns = [ 'hour', 'C1', 'banner_pos',
       'site_category', 'app_category', 'device_type', 'device_conn_type', 'C14',
       'C15', 'C16', 'C17', 'C18', 'C19', 'C20', 'C21'])

x_test=pd.DataFrame(x_test,columns = [ 'hour', 'C1', 'banner_pos',
       'site_category', 'app_category',  'device_type', 'device_conn_type', 'C14',
       'C15', 'C16', 'C17', 'C18', 'C19', 'C20', 'C21'])

x_train_dict = list(x_train.T.to_dict().values())
x_test_dict = list(x_test.T.to_dict().values())

x_train_dict[0]

y_train=pd.DataFrame(y_train,columns = ['click'])
y_test=pd.DataFrame(y_test,columns = ['click'])

from sklearn.feature_extraction import DictVectorizer

vector = DictVectorizer(sparse=True)
x_train = vectorizer.fit_transform(x_train_dict)
x_test = vectorizer.transform(x_test_dict)

import pickle
with open('vectorizer.pkl', 'wb') as file:
    pickle.dump(vectorizer, file)

x_train[0]

from sklearn.linear_model import LogisticRegression

classifier = LogisticRegression()
classifier.fit(x_train, y_train)

test_pred = classifier.predict(x_test)

from sklearn.metrics import accuracy_score

accuracy_score(y_test, test_pred)

train_pred = classifier.predict(x_train)

from sklearn.metrics import classification_report,confusion_matrix

print(classification_report(y_test,test_pred))
print(classification_report(y_train,train_pred))

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, test_pred)
print(cm)
print(accuracy_score(y_test, test_pred))
print(accuracy_score(y_train, train_pred))

pickle.dump(classifier,open('model.pkl','wb'))
model=pickle.load(open('model.pkl','rb'))

